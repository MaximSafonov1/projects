import os
import random
import shutil
from typing import List
import fiftyone as fo
import fiftyone.utils.data as foud

# Define paths
images_dir = "/absolute/path/to/images"  # Absolute path to the images folder
annotations_dir = "/absolute/path/to/annotation"  # Absolute path to the annotations folder
output_images_dir = "/absolute/path/to/selected_images"  # Folder for selected images
output_annotations_dir = "/absolute/path/to/selected_annotations"  # Folder for selected annotations
sample_percentage = 0.05  # Percentage of files to sample (5%)

# Create output directories if they don't exist
os.makedirs(output_images_dir, exist_ok=True)
os.makedirs(output_annotations_dir, exist_ok=True)

def get_all_files(directory: str) -> List[str]:
    """
    Recursively collects all file paths from a directory and its subdirectories.

    Args:
        directory (str): Path to the root directory.

    Returns:
        List[str]: A list of file paths found in the directory.
    """
    files = []
    for root, _, filenames in os.walk(directory):
        for filename in filenames:
            files.append(os.path.join(root, filename))
    return files

def random_sample_files(files: List[str], percentage: float) -> List[str]:
    """
    Randomly selects a percentage of files from a given list.

    Args:
        files (List[str]): List of file paths.
        percentage (float): Percentage of files to select (between 0 and 1).

    Returns:
        List[str]: A list of randomly selected file paths.
    """
    sample_size = max(1, int(len(files) * percentage))
    return random.sample(files, sample_size)

def copy_files(selected_files: List[str], src_dir: str, dest_dir: str) -> None:
    """
    Copies selected files to a destination directory, preserving folder structure.

    Args:
        selected_files (List[str]): List of file paths to copy.
        src_dir (str): Root directory of the source files.
        dest_dir (str): Root directory for the destination files.
    """
    for file_path in selected_files:
        # Preserve the folder structure by calculating the relative path
        relative_path = os.path.relpath(file_path, src_dir)
        dest_path = os.path.join(dest_dir, relative_path)
        os.makedirs(os.path.dirname(dest_path), exist_ok=True)
        shutil.copy(file_path, dest_path)

# Process categories (car and motobike)
categories = ["car", "motobike"]

for category in categories:
    # Define paths for each category (images and annotations)
    image_category_dir = os.path.join(images_dir, category)
    annotation_category_dir = os.path.join(annotations_dir, category)

    # Get all subfolders in the category
    subfolders = [
        os.path.join(image_category_dir, subfolder)
        for subfolder in os.listdir(image_category_dir)
        if os.path.isdir(os.path.join(image_category_dir, subfolder))
    ]
    
    for subfolder in subfolders:
        # Collect all image files in the subfolder
        image_files = get_all_files(subfolder)
        
        # Select a random sample of 5% of the images
        selected_images = random_sample_files(image_files, sample_percentage)

        # Determine corresponding annotation files (same name but .xml extension)
        annotation_subfolder = os.path.join(annotation_category_dir, os.path.basename(subfolder))
        annotation_files = [
            os.path.join(annotation_subfolder, os.path.basename(img).replace(".jpg", ".xml"))
            for img in selected_images
        ]

        # Copy selected images and corresponding annotations to the output directories
        copy_files(selected_images, images_dir, output_images_dir)
        copy_files(annotation_files, annotations_dir, output_annotations_dir)

# Load data into FiftyOne for quality inspection
dataset = fo.Dataset("image_quality_check")

dataset.add_dir(
    dataset_type=fo.types.COCODetectionDataset,  # Replace with PascalVOC if needed
    data_path=output_images_dir,
    labels_path=output_annotations_dir
)

# Launch the FiftyOne app to visually inspect the selected data
session = fo.launch_app(dataset)
